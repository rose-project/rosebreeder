From 91ce00d277e52479853bb03e439095639c911394 Mon Sep 17 00:00:00 2001
From: Christian Fries <christian.fries123@gmail.com>
Date: Tue, 23 Aug 2016 15:11:09 +0200
Subject: [PATCH] add support to split a rootfs in sub partitions Per default
 wic does not support this. it is nice to have a full rootfs for testing with
 qemu, but for deployment on a productive flash/sd it makes more sense to
 split the rootfs. With this patch it is possible to reach both goals... enjoy

---
 scripts/lib/wic/engine.py    |  1 +
 scripts/lib/wic/ksparser.py  | 16 ++++++++++++++++
 scripts/lib/wic/partition.py |  7 +++++++
 3 files changed, 24 insertions(+)

diff --git a/scripts/lib/wic/engine.py b/scripts/lib/wic/engine.py
index 76b93e8..12a8a10 100644
--- a/scripts/lib/wic/engine.py
+++ b/scripts/lib/wic/engine.py
@@ -150,6 +150,7 @@ def wic_create(wks_file, rootfs_dir, bootimg_dir, kernel_dir,
 
     wks_file - user-defined OE kickstart file
     rootfs_dir - absolute path to the build's /rootfs dir
+    submount-dir - path to folder inside /rootfs dir
     bootimg_dir - absolute path to the build's boot artifacts directory
     kernel_dir - absolute path to the build's kernel directory
     native_sysroot - absolute path to the build's native sysroots dir
diff --git a/scripts/lib/wic/ksparser.py b/scripts/lib/wic/ksparser.py
index 8c3f808..1ad0e03 100644
--- a/scripts/lib/wic/ksparser.py
+++ b/scripts/lib/wic/ksparser.py
@@ -118,6 +118,7 @@ class KickStart(object):
         part.add_argument("--overhead-factor", type=overheadtype, default=1.3)
         part.add_argument('--part-type')
         part.add_argument('--rootfs-dir')
+        part.add_argument('--submount-dir')
         part.add_argument('--size', type=sizetype, default=0)
         part.add_argument('--source')
         part.add_argument('--sourceparams')
@@ -144,6 +145,8 @@ class KickStart(object):
         """
         Parse file in .wks format using provided parser.
         """
+        rootfs = {}
+        submount = {}
         with open(confpath) as conf:
             lineno = 0
             for line in conf:
@@ -158,6 +161,10 @@ class KickStart(object):
                     if line.startswith('part'):
                         self.partnum += 1
                         self.partitions.append(Partition(parsed, self.partnum))
+                        if parsed.submount_dir:
+                            submount.setdefault(parsed.rootfs_dir, []).append(parsed.submount_dir)
+                        else:
+                            rootfs[self.partnum] = parsed.rootfs_dir
                     elif line.startswith('include'):
                         self._parse(parser, parsed.path)
                     elif line.startswith('bootloader'):
@@ -167,3 +174,12 @@ class KickStart(object):
                             err = "%s:%d: more than one bootloader specified" \
                                       % (confpath, lineno)
                             raise KickStartError(err)
+
+        # exclude submount dirs from root fs
+        for r in rootfs:
+            fs = rootfs[r]
+            if fs:
+                if fs not in submount:
+                    continue
+                exclude_list = submount[fs]
+                self.partitions[r-1].exclude_dirs = [s.strip('/') for s in exclude_list]
diff --git a/scripts/lib/wic/partition.py b/scripts/lib/wic/partition.py
index f40d1bc..506b5b5 100644
--- a/scripts/lib/wic/partition.py
+++ b/scripts/lib/wic/partition.py
@@ -54,6 +54,7 @@ class Partition(object):
         self.overhead_factor = args.overhead_factor
         self.part_type = args.part_type
         self.rootfs_dir = args.rootfs_dir
+        self.submount_dir = args.submount_dir
         self.size = args.size
         self.source = args.source
         self.sourceparams = args.sourceparams
@@ -65,6 +66,7 @@ class Partition(object):
         self.lineno = lineno
         self.source_file = ""
         self.sourceparams_dict = {}
+        self.exclude_dirs = []
 
     def get_extra_block_count(self, current_blocks):
         """
@@ -205,6 +207,9 @@ class Partition(object):
         """
         Prepare content for an ext2/3/4 rootfs partition.
         """
+        if self.submount_dir:
+            rootfs_dir = rootfs_dir + "/" + self.submount_dir
+
         du_cmd = "du -ks %s" % rootfs_dir
         out = exec_cmd(du_cmd)
         actual_rootfs_size = int(out.split()[0])
@@ -231,6 +236,8 @@ class Partition(object):
 
         mkfs_cmd = "mkfs.%s -F %s %s %s -d %s" % \
             (self.fstype, extra_imagecmd, rootfs, label_str, rootfs_dir)
+        if self.exclude_dirs:
+            mkfs_cmd = mkfs_cmd + " -w %s" % ",".join(self.exclude_dirs)
         exec_native_cmd(mkfs_cmd, native_sysroot, pseudo=pseudo)
 
     def prepare_rootfs_btrfs(self, rootfs, oe_builddir, rootfs_dir,
-- 
2.7.4

